// Copyright (c) 2023, PAL Robotics
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef MECANUM_JACOBIAN__JACOBIAN_CONTROLLER_HPP_
#define MECANUM_JACOBIAN__JACOBIAN_CONTROLLER_HPP_

// system
#include <limits>
#include <memory>
#include <string>
#include <vector>
#include <array>

#include "controller_interface/chainable_controller_interface.hpp"
#include "realtime_tools/realtime_thread_safe_box.hpp"
#include "std_msgs/msg/float64_multi_array.hpp"
#include "geometry_msgs/msg/transform_stamped.hpp"
#include "tf2_ros/transform_broadcaster.h"
#include "tf2/LinearMath/Quaternion.h"

// auto-generated by generate_parameter_library
#include "mecanum_jacobian/jacobian_controller_parameters.hpp"

namespace mecanum_jacobian
{

class JacobianController : public controller_interface::ChainableControllerInterface
{
public:
  controller_interface::CallbackReturn on_init() override;

  controller_interface::CallbackReturn on_configure(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::CallbackReturn on_activate(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::CallbackReturn on_deactivate(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  bool on_set_chained_mode(bool chained_mode) override;

  controller_interface::return_type update_and_write_commands(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  controller_interface::return_type update_reference_from_subscribers(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

protected:
  std::vector<hardware_interface::CommandInterface> on_export_reference_interfaces() override;
  std::vector<hardware_interface::StateInterface> on_export_state_interfaces() override;

private:
  // Parameters
  std::shared_ptr<jacobian_controller::ParamListener> param_listener_;
  jacobian_controller::Params params_;

  // Robot geometry parameters
  static constexpr double HALF_LENGTH = 0.36 / 2.0;  // a
  static constexpr double HALF_WIDTH = 0.36 / 2.0;   // b  
  static constexpr double WHEEL_RADIUS = 0.097 * 0.5; // r

  // Jacobian matrix for mecanum wheels [3x4]
  // Jp = [-1, -1, 1, 1; 1, -1, -1, 1; 1/(b+a), 1/(b+a), 1/(b+a), 1/(b+a)]
  std::array<std::array<double, 4>, 3> jacobian_matrix_;

  // State variables
  bool is_chained_mode_ = false;
    std::vector<std::string> state_interface_names_;

  
  // Exported state interface values
  double x_velocity_ = 0.0;
  double y_velocity_ = 0.0;  
  double phi_velocity_ = 0.0;

  // Odometry
  double x_pos_ = 0.0;
  double y_pos_ = 0.0;
  double theta_ = 0.0;
  rclcpp::Time last_update_time_;

  // TF broadcaster
  std::unique_ptr<tf2_ros::TransformBroadcaster> tf_broadcaster_;

  void initializeJacobianMatrix();
  void computeBodyVelocities(const std::vector<double>& joint_velocities);
  void updateOdometry(const rclcpp::Duration& period);
  void publishTransform(const rclcpp::Time& time);
};

}  // namespace mecanum_jacobian

#endif  // MECANUM_JACOBIAN__JACOBIAN_CONTROLLER_HPP_